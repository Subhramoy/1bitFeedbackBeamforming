# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_EnergyBeamforming_swig', [dirname(__file__)])
        except ImportError:
            import _EnergyBeamforming_swig
            return _EnergyBeamforming_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_EnergyBeamforming_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _EnergyBeamforming_swig = swig_import_helper()
    del swig_import_helper
else:
    import _EnergyBeamforming_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _EnergyBeamforming_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _EnergyBeamforming_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _EnergyBeamforming_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _EnergyBeamforming_swig.high_res_timer_epoch()
class lo_estimation_cf(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sample_rate, treshold, nbr_samples_packet, N, K):
        """
        make(double sample_rate, double treshold, int nbr_samples_packet, int N, int K) -> lo_estimation_cf_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::lo_estimation_cf.

        To avoid accidental use of raw pointers, EnergyBeamforming::lo_estimation_cf's constructor is in a private implementation class. EnergyBeamforming::lo_estimation_cf::make is the public interface for creating new instances.

        Params: (sample_rate, treshold, nbr_samples_packet, N, K)
        """
        return _EnergyBeamforming_swig.lo_estimation_cf_make(sample_rate, treshold, nbr_samples_packet, N, K)

    make = staticmethod(make)
    __swig_destroy__ = _EnergyBeamforming_swig.delete_lo_estimation_cf
    __del__ = lambda self: None
lo_estimation_cf_swigregister = _EnergyBeamforming_swig.lo_estimation_cf_swigregister
lo_estimation_cf_swigregister(lo_estimation_cf)

def lo_estimation_cf_make(sample_rate, treshold, nbr_samples_packet, N, K):
    """
    lo_estimation_cf_make(double sample_rate, double treshold, int nbr_samples_packet, int N, int K) -> lo_estimation_cf_sptr

    Return a shared_ptr to a new instance of EnergyBeamforming::lo_estimation_cf.

    To avoid accidental use of raw pointers, EnergyBeamforming::lo_estimation_cf's constructor is in a private implementation class. EnergyBeamforming::lo_estimation_cf::make is the public interface for creating new instances.

    Params: (sample_rate, treshold, nbr_samples_packet, N, K)
    """
    return _EnergyBeamforming_swig.lo_estimation_cf_make(sample_rate, treshold, nbr_samples_packet, N, K)

class lo_estimation_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::EnergyBeamforming::lo_estimation_cf)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::lo_estimation_cf)> self) -> lo_estimation_cf_sptr
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::lo_estimation_cf)> self, lo_estimation_cf p) -> lo_estimation_cf_sptr
        """
        this = _EnergyBeamforming_swig.new_lo_estimation_cf_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(lo_estimation_cf_sptr self) -> lo_estimation_cf"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr___deref__(self)

    __swig_destroy__ = _EnergyBeamforming_swig.delete_lo_estimation_cf_sptr
    __del__ = lambda self: None

    def make(self, sample_rate, treshold, nbr_samples_packet, N, K):
        """
        make(lo_estimation_cf_sptr self, double sample_rate, double treshold, int nbr_samples_packet, int N, int K) -> lo_estimation_cf_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::lo_estimation_cf.

        To avoid accidental use of raw pointers, EnergyBeamforming::lo_estimation_cf's constructor is in a private implementation class. EnergyBeamforming::lo_estimation_cf::make is the public interface for creating new instances.

        Params: (sample_rate, treshold, nbr_samples_packet, N, K)
        """
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_make(self, sample_rate, treshold, nbr_samples_packet, N, K)


    def history(self):
        """history(lo_estimation_cf_sptr self) -> unsigned int"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(lo_estimation_cf_sptr self, int which, int delay)
        declare_sample_delay(lo_estimation_cf_sptr self, unsigned int delay)
        """
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(lo_estimation_cf_sptr self, int which) -> unsigned int"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(lo_estimation_cf_sptr self) -> int"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(lo_estimation_cf_sptr self) -> double"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_relative_rate(self)


    def start(self):
        """start(lo_estimation_cf_sptr self) -> bool"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_start(self)


    def stop(self):
        """stop(lo_estimation_cf_sptr self) -> bool"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(lo_estimation_cf_sptr self, unsigned int which_input) -> uint64_t"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(lo_estimation_cf_sptr self, unsigned int which_output) -> uint64_t"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(lo_estimation_cf_sptr self) -> int"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(lo_estimation_cf_sptr self, int m)"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(lo_estimation_cf_sptr self)"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(lo_estimation_cf_sptr self) -> bool"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(lo_estimation_cf_sptr self, int m)"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(lo_estimation_cf_sptr self) -> int"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(lo_estimation_cf_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(lo_estimation_cf_sptr self, long max_output_buffer)
        set_max_output_buffer(lo_estimation_cf_sptr self, int port, long max_output_buffer)
        """
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(lo_estimation_cf_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(lo_estimation_cf_sptr self, long min_output_buffer)
        set_min_output_buffer(lo_estimation_cf_sptr self, int port, long min_output_buffer)
        """
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(lo_estimation_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(lo_estimation_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(lo_estimation_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(lo_estimation_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(lo_estimation_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(lo_estimation_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(lo_estimation_cf_sptr self, int which) -> float
        pc_input_buffers_full(lo_estimation_cf_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(lo_estimation_cf_sptr self, int which) -> float
        pc_input_buffers_full_avg(lo_estimation_cf_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(lo_estimation_cf_sptr self, int which) -> float
        pc_input_buffers_full_var(lo_estimation_cf_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(lo_estimation_cf_sptr self, int which) -> float
        pc_output_buffers_full(lo_estimation_cf_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(lo_estimation_cf_sptr self, int which) -> float
        pc_output_buffers_full_avg(lo_estimation_cf_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(lo_estimation_cf_sptr self, int which) -> float
        pc_output_buffers_full_var(lo_estimation_cf_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(lo_estimation_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(lo_estimation_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(lo_estimation_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(lo_estimation_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(lo_estimation_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(lo_estimation_cf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(lo_estimation_cf_sptr self)"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(lo_estimation_cf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(lo_estimation_cf_sptr self) -> int"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(lo_estimation_cf_sptr self) -> int"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(lo_estimation_cf_sptr self, int priority) -> int"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(lo_estimation_cf_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_name(self)


    def symbol_name(self):
        """symbol_name(lo_estimation_cf_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(lo_estimation_cf_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(lo_estimation_cf_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(lo_estimation_cf_sptr self) -> long"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(lo_estimation_cf_sptr self) -> basic_block_sptr"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(lo_estimation_cf_sptr self, int ninputs, int noutputs) -> bool"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(lo_estimation_cf_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(lo_estimation_cf_sptr self, std::string name)"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(lo_estimation_cf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(lo_estimation_cf_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(lo_estimation_cf_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(lo_estimation_cf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.lo_estimation_cf_sptr_message_subscribers(self, which_port)

lo_estimation_cf_sptr_swigregister = _EnergyBeamforming_swig.lo_estimation_cf_sptr_swigregister
lo_estimation_cf_sptr_swigregister(lo_estimation_cf_sptr)


lo_estimation_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
lo_estimation_cf = lo_estimation_cf.make;

class ekf_ff(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sample_rate, Tm, initial_freq, elts_Q, elts_R):
        """
        make(double sample_rate, double Tm, double initial_freq, pmt_vector_double elts_Q, pmt_vector_double elts_R) -> ekf_ff_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::ekf_ff.

        To avoid accidental use of raw pointers, EnergyBeamforming::ekf_ff's constructor is in a private implementation class. EnergyBeamforming::ekf_ff::make is the public interface for creating new instances.

        Params: (sample_rate, Tm, initial_freq, elts_Q, elts_R)
        """
        return _EnergyBeamforming_swig.ekf_ff_make(sample_rate, Tm, initial_freq, elts_Q, elts_R)

    make = staticmethod(make)
    __swig_destroy__ = _EnergyBeamforming_swig.delete_ekf_ff
    __del__ = lambda self: None
ekf_ff_swigregister = _EnergyBeamforming_swig.ekf_ff_swigregister
ekf_ff_swigregister(ekf_ff)

def ekf_ff_make(sample_rate, Tm, initial_freq, elts_Q, elts_R):
    """
    ekf_ff_make(double sample_rate, double Tm, double initial_freq, pmt_vector_double elts_Q, pmt_vector_double elts_R) -> ekf_ff_sptr

    Return a shared_ptr to a new instance of EnergyBeamforming::ekf_ff.

    To avoid accidental use of raw pointers, EnergyBeamforming::ekf_ff's constructor is in a private implementation class. EnergyBeamforming::ekf_ff::make is the public interface for creating new instances.

    Params: (sample_rate, Tm, initial_freq, elts_Q, elts_R)
    """
    return _EnergyBeamforming_swig.ekf_ff_make(sample_rate, Tm, initial_freq, elts_Q, elts_R)

class ekf_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::EnergyBeamforming::ekf_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::ekf_ff)> self) -> ekf_ff_sptr
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::ekf_ff)> self, ekf_ff p) -> ekf_ff_sptr
        """
        this = _EnergyBeamforming_swig.new_ekf_ff_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(ekf_ff_sptr self) -> ekf_ff"""
        return _EnergyBeamforming_swig.ekf_ff_sptr___deref__(self)

    __swig_destroy__ = _EnergyBeamforming_swig.delete_ekf_ff_sptr
    __del__ = lambda self: None

    def make(self, sample_rate, Tm, initial_freq, elts_Q, elts_R):
        """
        make(ekf_ff_sptr self, double sample_rate, double Tm, double initial_freq, pmt_vector_double elts_Q, pmt_vector_double elts_R) -> ekf_ff_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::ekf_ff.

        To avoid accidental use of raw pointers, EnergyBeamforming::ekf_ff's constructor is in a private implementation class. EnergyBeamforming::ekf_ff::make is the public interface for creating new instances.

        Params: (sample_rate, Tm, initial_freq, elts_Q, elts_R)
        """
        return _EnergyBeamforming_swig.ekf_ff_sptr_make(self, sample_rate, Tm, initial_freq, elts_Q, elts_R)


    def history(self):
        """history(ekf_ff_sptr self) -> unsigned int"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ekf_ff_sptr self, int which, int delay)
        declare_sample_delay(ekf_ff_sptr self, unsigned int delay)
        """
        return _EnergyBeamforming_swig.ekf_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(ekf_ff_sptr self, int which) -> unsigned int"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(ekf_ff_sptr self) -> int"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(ekf_ff_sptr self) -> double"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_relative_rate(self)


    def start(self):
        """start(ekf_ff_sptr self) -> bool"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_start(self)


    def stop(self):
        """stop(ekf_ff_sptr self) -> bool"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(ekf_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(ekf_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(ekf_ff_sptr self) -> int"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(ekf_ff_sptr self, int m)"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ekf_ff_sptr self)"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ekf_ff_sptr self) -> bool"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(ekf_ff_sptr self, int m)"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(ekf_ff_sptr self) -> int"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(ekf_ff_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ekf_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(ekf_ff_sptr self, int port, long max_output_buffer)
        """
        return _EnergyBeamforming_swig.ekf_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(ekf_ff_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ekf_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(ekf_ff_sptr self, int port, long min_output_buffer)
        """
        return _EnergyBeamforming_swig.ekf_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(ekf_ff_sptr self) -> float"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ekf_ff_sptr self) -> float"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ekf_ff_sptr self) -> float"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(ekf_ff_sptr self) -> float"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ekf_ff_sptr self) -> float"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(ekf_ff_sptr self) -> float"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ekf_ff_sptr self, int which) -> float
        pc_input_buffers_full(ekf_ff_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.ekf_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ekf_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(ekf_ff_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.ekf_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ekf_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(ekf_ff_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.ekf_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ekf_ff_sptr self, int which) -> float
        pc_output_buffers_full(ekf_ff_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.ekf_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ekf_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(ekf_ff_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.ekf_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ekf_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(ekf_ff_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.ekf_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(ekf_ff_sptr self) -> float"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(ekf_ff_sptr self) -> float"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(ekf_ff_sptr self) -> float"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(ekf_ff_sptr self) -> float"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(ekf_ff_sptr self) -> float"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(ekf_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(ekf_ff_sptr self)"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(ekf_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(ekf_ff_sptr self) -> int"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(ekf_ff_sptr self) -> int"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(ekf_ff_sptr self, int priority) -> int"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(ekf_ff_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(ekf_ff_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(ekf_ff_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(ekf_ff_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(ekf_ff_sptr self) -> long"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(ekf_ff_sptr self) -> basic_block_sptr"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(ekf_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(ekf_ff_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(ekf_ff_sptr self, std::string name)"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(ekf_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _EnergyBeamforming_swig.ekf_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(ekf_ff_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(ekf_ff_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(ekf_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.ekf_ff_sptr_message_subscribers(self, which_port)

ekf_ff_sptr_swigregister = _EnergyBeamforming_swig.ekf_ff_sptr_swigregister
ekf_ff_sptr_swigregister(ekf_ff_sptr)


ekf_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ekf_ff = ekf_ff.make;

class tx_packet_source(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sample_rate, time_delay, nbr_samples_packet, f_in, f_out):
        """
        make(double sample_rate, double time_delay, int nbr_samples_packet, float f_in, float f_out) -> tx_packet_source_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::tx_packet_source.

        To avoid accidental use of raw pointers, EnergyBeamforming::tx_packet_source's constructor is in a private implementation class. EnergyBeamforming::tx_packet_source::make is the public interface for creating new instances.

        Params: (sample_rate, time_delay, nbr_samples_packet, f_in, f_out)
        """
        return _EnergyBeamforming_swig.tx_packet_source_make(sample_rate, time_delay, nbr_samples_packet, f_in, f_out)

    make = staticmethod(make)
    __swig_destroy__ = _EnergyBeamforming_swig.delete_tx_packet_source
    __del__ = lambda self: None
tx_packet_source_swigregister = _EnergyBeamforming_swig.tx_packet_source_swigregister
tx_packet_source_swigregister(tx_packet_source)

def tx_packet_source_make(sample_rate, time_delay, nbr_samples_packet, f_in, f_out):
    """
    tx_packet_source_make(double sample_rate, double time_delay, int nbr_samples_packet, float f_in, float f_out) -> tx_packet_source_sptr

    Return a shared_ptr to a new instance of EnergyBeamforming::tx_packet_source.

    To avoid accidental use of raw pointers, EnergyBeamforming::tx_packet_source's constructor is in a private implementation class. EnergyBeamforming::tx_packet_source::make is the public interface for creating new instances.

    Params: (sample_rate, time_delay, nbr_samples_packet, f_in, f_out)
    """
    return _EnergyBeamforming_swig.tx_packet_source_make(sample_rate, time_delay, nbr_samples_packet, f_in, f_out)

class tx_packet_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::EnergyBeamforming::tx_packet_source)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::tx_packet_source)> self) -> tx_packet_source_sptr
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::tx_packet_source)> self, tx_packet_source p) -> tx_packet_source_sptr
        """
        this = _EnergyBeamforming_swig.new_tx_packet_source_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(tx_packet_source_sptr self) -> tx_packet_source"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr___deref__(self)

    __swig_destroy__ = _EnergyBeamforming_swig.delete_tx_packet_source_sptr
    __del__ = lambda self: None

    def make(self, sample_rate, time_delay, nbr_samples_packet, f_in, f_out):
        """
        make(tx_packet_source_sptr self, double sample_rate, double time_delay, int nbr_samples_packet, float f_in, float f_out) -> tx_packet_source_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::tx_packet_source.

        To avoid accidental use of raw pointers, EnergyBeamforming::tx_packet_source's constructor is in a private implementation class. EnergyBeamforming::tx_packet_source::make is the public interface for creating new instances.

        Params: (sample_rate, time_delay, nbr_samples_packet, f_in, f_out)
        """
        return _EnergyBeamforming_swig.tx_packet_source_sptr_make(self, sample_rate, time_delay, nbr_samples_packet, f_in, f_out)


    def history(self):
        """history(tx_packet_source_sptr self) -> unsigned int"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(tx_packet_source_sptr self, int which, int delay)
        declare_sample_delay(tx_packet_source_sptr self, unsigned int delay)
        """
        return _EnergyBeamforming_swig.tx_packet_source_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(tx_packet_source_sptr self, int which) -> unsigned int"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(tx_packet_source_sptr self) -> int"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(tx_packet_source_sptr self) -> double"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_relative_rate(self)


    def start(self):
        """start(tx_packet_source_sptr self) -> bool"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_start(self)


    def stop(self):
        """stop(tx_packet_source_sptr self) -> bool"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(tx_packet_source_sptr self, unsigned int which_input) -> uint64_t"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(tx_packet_source_sptr self, unsigned int which_output) -> uint64_t"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(tx_packet_source_sptr self) -> int"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(tx_packet_source_sptr self, int m)"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(tx_packet_source_sptr self)"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(tx_packet_source_sptr self) -> bool"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(tx_packet_source_sptr self, int m)"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(tx_packet_source_sptr self) -> int"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(tx_packet_source_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(tx_packet_source_sptr self, long max_output_buffer)
        set_max_output_buffer(tx_packet_source_sptr self, int port, long max_output_buffer)
        """
        return _EnergyBeamforming_swig.tx_packet_source_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(tx_packet_source_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(tx_packet_source_sptr self, long min_output_buffer)
        set_min_output_buffer(tx_packet_source_sptr self, int port, long min_output_buffer)
        """
        return _EnergyBeamforming_swig.tx_packet_source_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(tx_packet_source_sptr self) -> float"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(tx_packet_source_sptr self) -> float"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(tx_packet_source_sptr self) -> float"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(tx_packet_source_sptr self) -> float"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(tx_packet_source_sptr self) -> float"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(tx_packet_source_sptr self) -> float"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(tx_packet_source_sptr self, int which) -> float
        pc_input_buffers_full(tx_packet_source_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.tx_packet_source_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(tx_packet_source_sptr self, int which) -> float
        pc_input_buffers_full_avg(tx_packet_source_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.tx_packet_source_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(tx_packet_source_sptr self, int which) -> float
        pc_input_buffers_full_var(tx_packet_source_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.tx_packet_source_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(tx_packet_source_sptr self, int which) -> float
        pc_output_buffers_full(tx_packet_source_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.tx_packet_source_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(tx_packet_source_sptr self, int which) -> float
        pc_output_buffers_full_avg(tx_packet_source_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.tx_packet_source_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(tx_packet_source_sptr self, int which) -> float
        pc_output_buffers_full_var(tx_packet_source_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.tx_packet_source_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(tx_packet_source_sptr self) -> float"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(tx_packet_source_sptr self) -> float"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(tx_packet_source_sptr self) -> float"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(tx_packet_source_sptr self) -> float"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(tx_packet_source_sptr self) -> float"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(tx_packet_source_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(tx_packet_source_sptr self)"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(tx_packet_source_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(tx_packet_source_sptr self) -> int"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(tx_packet_source_sptr self) -> int"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(tx_packet_source_sptr self, int priority) -> int"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(tx_packet_source_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_name(self)


    def symbol_name(self):
        """symbol_name(tx_packet_source_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(tx_packet_source_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(tx_packet_source_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(tx_packet_source_sptr self) -> long"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(tx_packet_source_sptr self) -> basic_block_sptr"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(tx_packet_source_sptr self, int ninputs, int noutputs) -> bool"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(tx_packet_source_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(tx_packet_source_sptr self, std::string name)"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(tx_packet_source_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(tx_packet_source_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(tx_packet_source_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(tx_packet_source_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.tx_packet_source_sptr_message_subscribers(self, which_port)

tx_packet_source_sptr_swigregister = _EnergyBeamforming_swig.tx_packet_source_sptr_swigregister
tx_packet_source_sptr_swigregister(tx_packet_source_sptr)


tx_packet_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
tx_packet_source = tx_packet_source.make;

class bfweight_cc(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(bf_weight):
        """
        make(gr_complex bf_weight) -> bfweight_cc_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::bfweight_cc.

        To avoid accidental use of raw pointers, EnergyBeamforming::bfweight_cc's constructor is in a private implementation class. EnergyBeamforming::bfweight_cc::make is the public interface for creating new instances.

        Params: (bf_weight)
        """
        return _EnergyBeamforming_swig.bfweight_cc_make(bf_weight)

    make = staticmethod(make)

    def set_bf_weight(self, bf_weight):
        """
        set_bf_weight(bfweight_cc self, gr_complex bf_weight)



        Params: (bf_weight)
        """
        return _EnergyBeamforming_swig.bfweight_cc_set_bf_weight(self, bf_weight)

    __swig_destroy__ = _EnergyBeamforming_swig.delete_bfweight_cc
    __del__ = lambda self: None
bfweight_cc_swigregister = _EnergyBeamforming_swig.bfweight_cc_swigregister
bfweight_cc_swigregister(bfweight_cc)

def bfweight_cc_make(bf_weight):
    """
    bfweight_cc_make(gr_complex bf_weight) -> bfweight_cc_sptr

    Return a shared_ptr to a new instance of EnergyBeamforming::bfweight_cc.

    To avoid accidental use of raw pointers, EnergyBeamforming::bfweight_cc's constructor is in a private implementation class. EnergyBeamforming::bfweight_cc::make is the public interface for creating new instances.

    Params: (bf_weight)
    """
    return _EnergyBeamforming_swig.bfweight_cc_make(bf_weight)

class bfweight_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::EnergyBeamforming::bfweight_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::bfweight_cc)> self) -> bfweight_cc_sptr
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::bfweight_cc)> self, bfweight_cc p) -> bfweight_cc_sptr
        """
        this = _EnergyBeamforming_swig.new_bfweight_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(bfweight_cc_sptr self) -> bfweight_cc"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr___deref__(self)

    __swig_destroy__ = _EnergyBeamforming_swig.delete_bfweight_cc_sptr
    __del__ = lambda self: None

    def make(self, bf_weight):
        """
        make(bfweight_cc_sptr self, gr_complex bf_weight) -> bfweight_cc_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::bfweight_cc.

        To avoid accidental use of raw pointers, EnergyBeamforming::bfweight_cc's constructor is in a private implementation class. EnergyBeamforming::bfweight_cc::make is the public interface for creating new instances.

        Params: (bf_weight)
        """
        return _EnergyBeamforming_swig.bfweight_cc_sptr_make(self, bf_weight)


    def set_bf_weight(self, bf_weight):
        """
        set_bf_weight(bfweight_cc_sptr self, gr_complex bf_weight)



        Params: (bf_weight)
        """
        return _EnergyBeamforming_swig.bfweight_cc_sptr_set_bf_weight(self, bf_weight)


    def history(self):
        """history(bfweight_cc_sptr self) -> unsigned int"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(bfweight_cc_sptr self, int which, int delay)
        declare_sample_delay(bfweight_cc_sptr self, unsigned int delay)
        """
        return _EnergyBeamforming_swig.bfweight_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(bfweight_cc_sptr self, int which) -> unsigned int"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(bfweight_cc_sptr self) -> int"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(bfweight_cc_sptr self) -> double"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_relative_rate(self)


    def start(self):
        """start(bfweight_cc_sptr self) -> bool"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_start(self)


    def stop(self):
        """stop(bfweight_cc_sptr self) -> bool"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(bfweight_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(bfweight_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(bfweight_cc_sptr self) -> int"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(bfweight_cc_sptr self, int m)"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(bfweight_cc_sptr self)"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(bfweight_cc_sptr self) -> bool"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(bfweight_cc_sptr self, int m)"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(bfweight_cc_sptr self) -> int"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(bfweight_cc_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(bfweight_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(bfweight_cc_sptr self, int port, long max_output_buffer)
        """
        return _EnergyBeamforming_swig.bfweight_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(bfweight_cc_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(bfweight_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(bfweight_cc_sptr self, int port, long min_output_buffer)
        """
        return _EnergyBeamforming_swig.bfweight_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(bfweight_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(bfweight_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(bfweight_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(bfweight_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(bfweight_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(bfweight_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(bfweight_cc_sptr self, int which) -> float
        pc_input_buffers_full(bfweight_cc_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.bfweight_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(bfweight_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(bfweight_cc_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.bfweight_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(bfweight_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(bfweight_cc_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.bfweight_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(bfweight_cc_sptr self, int which) -> float
        pc_output_buffers_full(bfweight_cc_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.bfweight_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(bfweight_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(bfweight_cc_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.bfweight_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(bfweight_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(bfweight_cc_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.bfweight_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(bfweight_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(bfweight_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(bfweight_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(bfweight_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(bfweight_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(bfweight_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(bfweight_cc_sptr self)"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(bfweight_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(bfweight_cc_sptr self) -> int"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(bfweight_cc_sptr self) -> int"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(bfweight_cc_sptr self, int priority) -> int"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(bfweight_cc_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(bfweight_cc_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(bfweight_cc_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(bfweight_cc_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(bfweight_cc_sptr self) -> long"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(bfweight_cc_sptr self) -> basic_block_sptr"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(bfweight_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(bfweight_cc_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(bfweight_cc_sptr self, std::string name)"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(bfweight_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(bfweight_cc_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(bfweight_cc_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(bfweight_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.bfweight_cc_sptr_message_subscribers(self, which_port)

bfweight_cc_sptr_swigregister = _EnergyBeamforming_swig.bfweight_cc_sptr_swigregister
bfweight_cc_sptr_swigregister(bfweight_cc_sptr)


bfweight_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
bfweight_cc = bfweight_cc.make;

class randphpert_f(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(rand_pert_size, bf_flag):
        """
        make(double rand_pert_size, int bf_flag) -> randphpert_f_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::randphpert_f.

        To avoid accidental use of raw pointers, EnergyBeamforming::randphpert_f's constructor is in a private implementation class. EnergyBeamforming::randphpert_f::make is the public interface for creating new instances.

        Params: (rand_pert_size, bf_flag)
        """
        return _EnergyBeamforming_swig.randphpert_f_make(rand_pert_size, bf_flag)

    make = staticmethod(make)
    __swig_destroy__ = _EnergyBeamforming_swig.delete_randphpert_f
    __del__ = lambda self: None
randphpert_f_swigregister = _EnergyBeamforming_swig.randphpert_f_swigregister
randphpert_f_swigregister(randphpert_f)

def randphpert_f_make(rand_pert_size, bf_flag):
    """
    randphpert_f_make(double rand_pert_size, int bf_flag) -> randphpert_f_sptr

    Return a shared_ptr to a new instance of EnergyBeamforming::randphpert_f.

    To avoid accidental use of raw pointers, EnergyBeamforming::randphpert_f's constructor is in a private implementation class. EnergyBeamforming::randphpert_f::make is the public interface for creating new instances.

    Params: (rand_pert_size, bf_flag)
    """
    return _EnergyBeamforming_swig.randphpert_f_make(rand_pert_size, bf_flag)

class randphpert_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::EnergyBeamforming::randphpert_f)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::randphpert_f)> self) -> randphpert_f_sptr
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::randphpert_f)> self, randphpert_f p) -> randphpert_f_sptr
        """
        this = _EnergyBeamforming_swig.new_randphpert_f_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(randphpert_f_sptr self) -> randphpert_f"""
        return _EnergyBeamforming_swig.randphpert_f_sptr___deref__(self)

    __swig_destroy__ = _EnergyBeamforming_swig.delete_randphpert_f_sptr
    __del__ = lambda self: None

    def make(self, rand_pert_size, bf_flag):
        """
        make(randphpert_f_sptr self, double rand_pert_size, int bf_flag) -> randphpert_f_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::randphpert_f.

        To avoid accidental use of raw pointers, EnergyBeamforming::randphpert_f's constructor is in a private implementation class. EnergyBeamforming::randphpert_f::make is the public interface for creating new instances.

        Params: (rand_pert_size, bf_flag)
        """
        return _EnergyBeamforming_swig.randphpert_f_sptr_make(self, rand_pert_size, bf_flag)


    def history(self):
        """history(randphpert_f_sptr self) -> unsigned int"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(randphpert_f_sptr self, int which, int delay)
        declare_sample_delay(randphpert_f_sptr self, unsigned int delay)
        """
        return _EnergyBeamforming_swig.randphpert_f_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(randphpert_f_sptr self, int which) -> unsigned int"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(randphpert_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(randphpert_f_sptr self) -> double"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_relative_rate(self)


    def start(self):
        """start(randphpert_f_sptr self) -> bool"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_start(self)


    def stop(self):
        """stop(randphpert_f_sptr self) -> bool"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(randphpert_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(randphpert_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(randphpert_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(randphpert_f_sptr self, int m)"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(randphpert_f_sptr self)"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(randphpert_f_sptr self) -> bool"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(randphpert_f_sptr self, int m)"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(randphpert_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(randphpert_f_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(randphpert_f_sptr self, long max_output_buffer)
        set_max_output_buffer(randphpert_f_sptr self, int port, long max_output_buffer)
        """
        return _EnergyBeamforming_swig.randphpert_f_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(randphpert_f_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(randphpert_f_sptr self, long min_output_buffer)
        set_min_output_buffer(randphpert_f_sptr self, int port, long min_output_buffer)
        """
        return _EnergyBeamforming_swig.randphpert_f_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(randphpert_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(randphpert_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(randphpert_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(randphpert_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(randphpert_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(randphpert_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(randphpert_f_sptr self, int which) -> float
        pc_input_buffers_full(randphpert_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert_f_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(randphpert_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(randphpert_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert_f_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(randphpert_f_sptr self, int which) -> float
        pc_input_buffers_full_var(randphpert_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert_f_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(randphpert_f_sptr self, int which) -> float
        pc_output_buffers_full(randphpert_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert_f_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(randphpert_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(randphpert_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert_f_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(randphpert_f_sptr self, int which) -> float
        pc_output_buffers_full_var(randphpert_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert_f_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(randphpert_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(randphpert_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(randphpert_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(randphpert_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(randphpert_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(randphpert_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(randphpert_f_sptr self)"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(randphpert_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(randphpert_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(randphpert_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(randphpert_f_sptr self, int priority) -> int"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(randphpert_f_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_name(self)


    def symbol_name(self):
        """symbol_name(randphpert_f_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(randphpert_f_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(randphpert_f_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(randphpert_f_sptr self) -> long"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(randphpert_f_sptr self) -> basic_block_sptr"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(randphpert_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(randphpert_f_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(randphpert_f_sptr self, std::string name)"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(randphpert_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _EnergyBeamforming_swig.randphpert_f_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(randphpert_f_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(randphpert_f_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(randphpert_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.randphpert_f_sptr_message_subscribers(self, which_port)

randphpert_f_sptr_swigregister = _EnergyBeamforming_swig.randphpert_f_sptr_swigregister
randphpert_f_sptr_swigregister(randphpert_f_sptr)


randphpert_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
randphpert_f = randphpert_f.make;

class correct_gmsk_cc(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(nbr_samples_packet, sampling_freq):
        """
        make(double nbr_samples_packet, double sampling_freq) -> correct_gmsk_cc_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::correct_gmsk_cc.

        To avoid accidental use of raw pointers, EnergyBeamforming::correct_gmsk_cc's constructor is in a private implementation class. EnergyBeamforming::correct_gmsk_cc::make is the public interface for creating new instances.

        Params: (nbr_samples_packet, sampling_freq)
        """
        return _EnergyBeamforming_swig.correct_gmsk_cc_make(nbr_samples_packet, sampling_freq)

    make = staticmethod(make)
    __swig_destroy__ = _EnergyBeamforming_swig.delete_correct_gmsk_cc
    __del__ = lambda self: None
correct_gmsk_cc_swigregister = _EnergyBeamforming_swig.correct_gmsk_cc_swigregister
correct_gmsk_cc_swigregister(correct_gmsk_cc)

def correct_gmsk_cc_make(nbr_samples_packet, sampling_freq):
    """
    correct_gmsk_cc_make(double nbr_samples_packet, double sampling_freq) -> correct_gmsk_cc_sptr

    Return a shared_ptr to a new instance of EnergyBeamforming::correct_gmsk_cc.

    To avoid accidental use of raw pointers, EnergyBeamforming::correct_gmsk_cc's constructor is in a private implementation class. EnergyBeamforming::correct_gmsk_cc::make is the public interface for creating new instances.

    Params: (nbr_samples_packet, sampling_freq)
    """
    return _EnergyBeamforming_swig.correct_gmsk_cc_make(nbr_samples_packet, sampling_freq)

class correct_gmsk_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::EnergyBeamforming::correct_gmsk_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::correct_gmsk_cc)> self) -> correct_gmsk_cc_sptr
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::correct_gmsk_cc)> self, correct_gmsk_cc p) -> correct_gmsk_cc_sptr
        """
        this = _EnergyBeamforming_swig.new_correct_gmsk_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(correct_gmsk_cc_sptr self) -> correct_gmsk_cc"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr___deref__(self)

    __swig_destroy__ = _EnergyBeamforming_swig.delete_correct_gmsk_cc_sptr
    __del__ = lambda self: None

    def make(self, nbr_samples_packet, sampling_freq):
        """
        make(correct_gmsk_cc_sptr self, double nbr_samples_packet, double sampling_freq) -> correct_gmsk_cc_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::correct_gmsk_cc.

        To avoid accidental use of raw pointers, EnergyBeamforming::correct_gmsk_cc's constructor is in a private implementation class. EnergyBeamforming::correct_gmsk_cc::make is the public interface for creating new instances.

        Params: (nbr_samples_packet, sampling_freq)
        """
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_make(self, nbr_samples_packet, sampling_freq)


    def history(self):
        """history(correct_gmsk_cc_sptr self) -> unsigned int"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(correct_gmsk_cc_sptr self, int which, int delay)
        declare_sample_delay(correct_gmsk_cc_sptr self, unsigned int delay)
        """
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(correct_gmsk_cc_sptr self, int which) -> unsigned int"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(correct_gmsk_cc_sptr self) -> int"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(correct_gmsk_cc_sptr self) -> double"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_relative_rate(self)


    def start(self):
        """start(correct_gmsk_cc_sptr self) -> bool"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_start(self)


    def stop(self):
        """stop(correct_gmsk_cc_sptr self) -> bool"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(correct_gmsk_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(correct_gmsk_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(correct_gmsk_cc_sptr self) -> int"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(correct_gmsk_cc_sptr self, int m)"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(correct_gmsk_cc_sptr self)"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(correct_gmsk_cc_sptr self) -> bool"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(correct_gmsk_cc_sptr self, int m)"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(correct_gmsk_cc_sptr self) -> int"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(correct_gmsk_cc_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(correct_gmsk_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(correct_gmsk_cc_sptr self, int port, long max_output_buffer)
        """
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(correct_gmsk_cc_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(correct_gmsk_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(correct_gmsk_cc_sptr self, int port, long min_output_buffer)
        """
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(correct_gmsk_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(correct_gmsk_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(correct_gmsk_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(correct_gmsk_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(correct_gmsk_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(correct_gmsk_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(correct_gmsk_cc_sptr self, int which) -> float
        pc_input_buffers_full(correct_gmsk_cc_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(correct_gmsk_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(correct_gmsk_cc_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(correct_gmsk_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(correct_gmsk_cc_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(correct_gmsk_cc_sptr self, int which) -> float
        pc_output_buffers_full(correct_gmsk_cc_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(correct_gmsk_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(correct_gmsk_cc_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(correct_gmsk_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(correct_gmsk_cc_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(correct_gmsk_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(correct_gmsk_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(correct_gmsk_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(correct_gmsk_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(correct_gmsk_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(correct_gmsk_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(correct_gmsk_cc_sptr self)"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(correct_gmsk_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(correct_gmsk_cc_sptr self) -> int"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(correct_gmsk_cc_sptr self) -> int"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(correct_gmsk_cc_sptr self, int priority) -> int"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(correct_gmsk_cc_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(correct_gmsk_cc_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(correct_gmsk_cc_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(correct_gmsk_cc_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(correct_gmsk_cc_sptr self) -> long"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(correct_gmsk_cc_sptr self) -> basic_block_sptr"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(correct_gmsk_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(correct_gmsk_cc_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(correct_gmsk_cc_sptr self, std::string name)"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(correct_gmsk_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(correct_gmsk_cc_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(correct_gmsk_cc_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(correct_gmsk_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.correct_gmsk_cc_sptr_message_subscribers(self, which_port)

correct_gmsk_cc_sptr_swigregister = _EnergyBeamforming_swig.correct_gmsk_cc_sptr_swigregister
correct_gmsk_cc_sptr_swigregister(correct_gmsk_cc_sptr)


correct_gmsk_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
correct_gmsk_cc = correct_gmsk_cc.make;

class randphpert2_f(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(rand_pert_size, bf_flag):
        """
        make(double rand_pert_size, int bf_flag) -> randphpert2_f_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::randphpert2_f.

        To avoid accidental use of raw pointers, EnergyBeamforming::randphpert2_f's constructor is in a private implementation class. EnergyBeamforming::randphpert2_f::make is the public interface for creating new instances.

        Params: (rand_pert_size, bf_flag)
        """
        return _EnergyBeamforming_swig.randphpert2_f_make(rand_pert_size, bf_flag)

    make = staticmethod(make)

    def poll_complex_gain(self):
        """
        poll_complex_gain(randphpert2_f self) -> gr_complex



        Params: (NONE)
        """
        return _EnergyBeamforming_swig.randphpert2_f_poll_complex_gain(self)


    def bf_flag(self):
        """
        bf_flag(randphpert2_f self) -> int



        Params: (NONE)
        """
        return _EnergyBeamforming_swig.randphpert2_f_bf_flag(self)

    __swig_destroy__ = _EnergyBeamforming_swig.delete_randphpert2_f
    __del__ = lambda self: None
randphpert2_f_swigregister = _EnergyBeamforming_swig.randphpert2_f_swigregister
randphpert2_f_swigregister(randphpert2_f)

def randphpert2_f_make(rand_pert_size, bf_flag):
    """
    randphpert2_f_make(double rand_pert_size, int bf_flag) -> randphpert2_f_sptr

    Return a shared_ptr to a new instance of EnergyBeamforming::randphpert2_f.

    To avoid accidental use of raw pointers, EnergyBeamforming::randphpert2_f's constructor is in a private implementation class. EnergyBeamforming::randphpert2_f::make is the public interface for creating new instances.

    Params: (rand_pert_size, bf_flag)
    """
    return _EnergyBeamforming_swig.randphpert2_f_make(rand_pert_size, bf_flag)

class randphpert2_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::EnergyBeamforming::randphpert2_f)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::randphpert2_f)> self) -> randphpert2_f_sptr
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::randphpert2_f)> self, randphpert2_f p) -> randphpert2_f_sptr
        """
        this = _EnergyBeamforming_swig.new_randphpert2_f_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(randphpert2_f_sptr self) -> randphpert2_f"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr___deref__(self)

    __swig_destroy__ = _EnergyBeamforming_swig.delete_randphpert2_f_sptr
    __del__ = lambda self: None

    def make(self, rand_pert_size, bf_flag):
        """
        make(randphpert2_f_sptr self, double rand_pert_size, int bf_flag) -> randphpert2_f_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::randphpert2_f.

        To avoid accidental use of raw pointers, EnergyBeamforming::randphpert2_f's constructor is in a private implementation class. EnergyBeamforming::randphpert2_f::make is the public interface for creating new instances.

        Params: (rand_pert_size, bf_flag)
        """
        return _EnergyBeamforming_swig.randphpert2_f_sptr_make(self, rand_pert_size, bf_flag)


    def poll_complex_gain(self):
        """
        poll_complex_gain(randphpert2_f_sptr self) -> gr_complex



        Params: (NONE)
        """
        return _EnergyBeamforming_swig.randphpert2_f_sptr_poll_complex_gain(self)


    def bf_flag(self):
        """
        bf_flag(randphpert2_f_sptr self) -> int



        Params: (NONE)
        """
        return _EnergyBeamforming_swig.randphpert2_f_sptr_bf_flag(self)


    def history(self):
        """history(randphpert2_f_sptr self) -> unsigned int"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(randphpert2_f_sptr self, int which, int delay)
        declare_sample_delay(randphpert2_f_sptr self, unsigned int delay)
        """
        return _EnergyBeamforming_swig.randphpert2_f_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(randphpert2_f_sptr self, int which) -> unsigned int"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(randphpert2_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(randphpert2_f_sptr self) -> double"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_relative_rate(self)


    def start(self):
        """start(randphpert2_f_sptr self) -> bool"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_start(self)


    def stop(self):
        """stop(randphpert2_f_sptr self) -> bool"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(randphpert2_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(randphpert2_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(randphpert2_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(randphpert2_f_sptr self, int m)"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(randphpert2_f_sptr self)"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(randphpert2_f_sptr self) -> bool"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(randphpert2_f_sptr self, int m)"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(randphpert2_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(randphpert2_f_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(randphpert2_f_sptr self, long max_output_buffer)
        set_max_output_buffer(randphpert2_f_sptr self, int port, long max_output_buffer)
        """
        return _EnergyBeamforming_swig.randphpert2_f_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(randphpert2_f_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(randphpert2_f_sptr self, long min_output_buffer)
        set_min_output_buffer(randphpert2_f_sptr self, int port, long min_output_buffer)
        """
        return _EnergyBeamforming_swig.randphpert2_f_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(randphpert2_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(randphpert2_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(randphpert2_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(randphpert2_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(randphpert2_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(randphpert2_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(randphpert2_f_sptr self, int which) -> float
        pc_input_buffers_full(randphpert2_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert2_f_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(randphpert2_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(randphpert2_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert2_f_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(randphpert2_f_sptr self, int which) -> float
        pc_input_buffers_full_var(randphpert2_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert2_f_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(randphpert2_f_sptr self, int which) -> float
        pc_output_buffers_full(randphpert2_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert2_f_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(randphpert2_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(randphpert2_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert2_f_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(randphpert2_f_sptr self, int which) -> float
        pc_output_buffers_full_var(randphpert2_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert2_f_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(randphpert2_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(randphpert2_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(randphpert2_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(randphpert2_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(randphpert2_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(randphpert2_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(randphpert2_f_sptr self)"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(randphpert2_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(randphpert2_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(randphpert2_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(randphpert2_f_sptr self, int priority) -> int"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(randphpert2_f_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_name(self)


    def symbol_name(self):
        """symbol_name(randphpert2_f_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(randphpert2_f_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(randphpert2_f_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(randphpert2_f_sptr self) -> long"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(randphpert2_f_sptr self) -> basic_block_sptr"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(randphpert2_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(randphpert2_f_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(randphpert2_f_sptr self, std::string name)"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(randphpert2_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(randphpert2_f_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(randphpert2_f_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(randphpert2_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.randphpert2_f_sptr_message_subscribers(self, which_port)

randphpert2_f_sptr_swigregister = _EnergyBeamforming_swig.randphpert2_f_sptr_swigregister
randphpert2_f_sptr_swigregister(randphpert2_f_sptr)


randphpert2_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
randphpert2_f = randphpert2_f.make;

class one_bit_feedb2_cf(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sample_rate, decim_factor):
        """
        make(double sample_rate, int decim_factor) -> one_bit_feedb2_cf_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::one_bit_feedb2_cf.

        To avoid accidental use of raw pointers, EnergyBeamforming::one_bit_feedb2_cf's constructor is in a private implementation class. EnergyBeamforming::one_bit_feedb2_cf::make is the public interface for creating new instances.

        Params: (sample_rate, decim_factor)
        """
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_make(sample_rate, decim_factor)

    make = staticmethod(make)
    __swig_destroy__ = _EnergyBeamforming_swig.delete_one_bit_feedb2_cf
    __del__ = lambda self: None
one_bit_feedb2_cf_swigregister = _EnergyBeamforming_swig.one_bit_feedb2_cf_swigregister
one_bit_feedb2_cf_swigregister(one_bit_feedb2_cf)

def one_bit_feedb2_cf_make(sample_rate, decim_factor):
    """
    one_bit_feedb2_cf_make(double sample_rate, int decim_factor) -> one_bit_feedb2_cf_sptr

    Return a shared_ptr to a new instance of EnergyBeamforming::one_bit_feedb2_cf.

    To avoid accidental use of raw pointers, EnergyBeamforming::one_bit_feedb2_cf's constructor is in a private implementation class. EnergyBeamforming::one_bit_feedb2_cf::make is the public interface for creating new instances.

    Params: (sample_rate, decim_factor)
    """
    return _EnergyBeamforming_swig.one_bit_feedb2_cf_make(sample_rate, decim_factor)

class one_bit_feedb2_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::EnergyBeamforming::one_bit_feedb2_cf)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::one_bit_feedb2_cf)> self) -> one_bit_feedb2_cf_sptr
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::one_bit_feedb2_cf)> self, one_bit_feedb2_cf p) -> one_bit_feedb2_cf_sptr
        """
        this = _EnergyBeamforming_swig.new_one_bit_feedb2_cf_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(one_bit_feedb2_cf_sptr self) -> one_bit_feedb2_cf"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr___deref__(self)

    __swig_destroy__ = _EnergyBeamforming_swig.delete_one_bit_feedb2_cf_sptr
    __del__ = lambda self: None

    def make(self, sample_rate, decim_factor):
        """
        make(one_bit_feedb2_cf_sptr self, double sample_rate, int decim_factor) -> one_bit_feedb2_cf_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::one_bit_feedb2_cf.

        To avoid accidental use of raw pointers, EnergyBeamforming::one_bit_feedb2_cf's constructor is in a private implementation class. EnergyBeamforming::one_bit_feedb2_cf::make is the public interface for creating new instances.

        Params: (sample_rate, decim_factor)
        """
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_make(self, sample_rate, decim_factor)


    def history(self):
        """history(one_bit_feedb2_cf_sptr self) -> unsigned int"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(one_bit_feedb2_cf_sptr self, int which, int delay)
        declare_sample_delay(one_bit_feedb2_cf_sptr self, unsigned int delay)
        """
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(one_bit_feedb2_cf_sptr self, int which) -> unsigned int"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(one_bit_feedb2_cf_sptr self) -> int"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(one_bit_feedb2_cf_sptr self) -> double"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_relative_rate(self)


    def start(self):
        """start(one_bit_feedb2_cf_sptr self) -> bool"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_start(self)


    def stop(self):
        """stop(one_bit_feedb2_cf_sptr self) -> bool"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(one_bit_feedb2_cf_sptr self, unsigned int which_input) -> uint64_t"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(one_bit_feedb2_cf_sptr self, unsigned int which_output) -> uint64_t"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(one_bit_feedb2_cf_sptr self) -> int"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(one_bit_feedb2_cf_sptr self, int m)"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(one_bit_feedb2_cf_sptr self)"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(one_bit_feedb2_cf_sptr self) -> bool"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(one_bit_feedb2_cf_sptr self, int m)"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(one_bit_feedb2_cf_sptr self) -> int"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(one_bit_feedb2_cf_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(one_bit_feedb2_cf_sptr self, long max_output_buffer)
        set_max_output_buffer(one_bit_feedb2_cf_sptr self, int port, long max_output_buffer)
        """
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(one_bit_feedb2_cf_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(one_bit_feedb2_cf_sptr self, long min_output_buffer)
        set_min_output_buffer(one_bit_feedb2_cf_sptr self, int port, long min_output_buffer)
        """
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(one_bit_feedb2_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(one_bit_feedb2_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(one_bit_feedb2_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(one_bit_feedb2_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(one_bit_feedb2_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(one_bit_feedb2_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(one_bit_feedb2_cf_sptr self, int which) -> float
        pc_input_buffers_full(one_bit_feedb2_cf_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(one_bit_feedb2_cf_sptr self, int which) -> float
        pc_input_buffers_full_avg(one_bit_feedb2_cf_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(one_bit_feedb2_cf_sptr self, int which) -> float
        pc_input_buffers_full_var(one_bit_feedb2_cf_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(one_bit_feedb2_cf_sptr self, int which) -> float
        pc_output_buffers_full(one_bit_feedb2_cf_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(one_bit_feedb2_cf_sptr self, int which) -> float
        pc_output_buffers_full_avg(one_bit_feedb2_cf_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(one_bit_feedb2_cf_sptr self, int which) -> float
        pc_output_buffers_full_var(one_bit_feedb2_cf_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(one_bit_feedb2_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(one_bit_feedb2_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(one_bit_feedb2_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(one_bit_feedb2_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(one_bit_feedb2_cf_sptr self) -> float"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(one_bit_feedb2_cf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(one_bit_feedb2_cf_sptr self)"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(one_bit_feedb2_cf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(one_bit_feedb2_cf_sptr self) -> int"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(one_bit_feedb2_cf_sptr self) -> int"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(one_bit_feedb2_cf_sptr self, int priority) -> int"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(one_bit_feedb2_cf_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_name(self)


    def symbol_name(self):
        """symbol_name(one_bit_feedb2_cf_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(one_bit_feedb2_cf_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(one_bit_feedb2_cf_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(one_bit_feedb2_cf_sptr self) -> long"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(one_bit_feedb2_cf_sptr self) -> basic_block_sptr"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(one_bit_feedb2_cf_sptr self, int ninputs, int noutputs) -> bool"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(one_bit_feedb2_cf_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(one_bit_feedb2_cf_sptr self, std::string name)"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(one_bit_feedb2_cf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(one_bit_feedb2_cf_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(one_bit_feedb2_cf_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(one_bit_feedb2_cf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_message_subscribers(self, which_port)

one_bit_feedb2_cf_sptr_swigregister = _EnergyBeamforming_swig.one_bit_feedb2_cf_sptr_swigregister
one_bit_feedb2_cf_sptr_swigregister(one_bit_feedb2_cf_sptr)


one_bit_feedb2_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
one_bit_feedb2_cf = one_bit_feedb2_cf.make;

class multi_slicer_fi(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(upper_th, lower_th):
        """
        make(double upper_th, double lower_th) -> multi_slicer_fi_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::multi_slicer_fi.

        To avoid accidental use of raw pointers, EnergyBeamforming::multi_slicer_fi's constructor is in a private implementation class. EnergyBeamforming::multi_slicer_fi::make is the public interface for creating new instances.

        Params: (upper_th, lower_th)
        """
        return _EnergyBeamforming_swig.multi_slicer_fi_make(upper_th, lower_th)

    make = staticmethod(make)
    __swig_destroy__ = _EnergyBeamforming_swig.delete_multi_slicer_fi
    __del__ = lambda self: None
multi_slicer_fi_swigregister = _EnergyBeamforming_swig.multi_slicer_fi_swigregister
multi_slicer_fi_swigregister(multi_slicer_fi)

def multi_slicer_fi_make(upper_th, lower_th):
    """
    multi_slicer_fi_make(double upper_th, double lower_th) -> multi_slicer_fi_sptr

    Return a shared_ptr to a new instance of EnergyBeamforming::multi_slicer_fi.

    To avoid accidental use of raw pointers, EnergyBeamforming::multi_slicer_fi's constructor is in a private implementation class. EnergyBeamforming::multi_slicer_fi::make is the public interface for creating new instances.

    Params: (upper_th, lower_th)
    """
    return _EnergyBeamforming_swig.multi_slicer_fi_make(upper_th, lower_th)

class multi_slicer_fi_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::EnergyBeamforming::multi_slicer_fi)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::multi_slicer_fi)> self) -> multi_slicer_fi_sptr
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::multi_slicer_fi)> self, multi_slicer_fi p) -> multi_slicer_fi_sptr
        """
        this = _EnergyBeamforming_swig.new_multi_slicer_fi_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(multi_slicer_fi_sptr self) -> multi_slicer_fi"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr___deref__(self)

    __swig_destroy__ = _EnergyBeamforming_swig.delete_multi_slicer_fi_sptr
    __del__ = lambda self: None

    def make(self, upper_th, lower_th):
        """
        make(multi_slicer_fi_sptr self, double upper_th, double lower_th) -> multi_slicer_fi_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::multi_slicer_fi.

        To avoid accidental use of raw pointers, EnergyBeamforming::multi_slicer_fi's constructor is in a private implementation class. EnergyBeamforming::multi_slicer_fi::make is the public interface for creating new instances.

        Params: (upper_th, lower_th)
        """
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_make(self, upper_th, lower_th)


    def history(self):
        """history(multi_slicer_fi_sptr self) -> unsigned int"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multi_slicer_fi_sptr self, int which, int delay)
        declare_sample_delay(multi_slicer_fi_sptr self, unsigned int delay)
        """
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(multi_slicer_fi_sptr self, int which) -> unsigned int"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(multi_slicer_fi_sptr self) -> int"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(multi_slicer_fi_sptr self) -> double"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_relative_rate(self)


    def start(self):
        """start(multi_slicer_fi_sptr self) -> bool"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_start(self)


    def stop(self):
        """stop(multi_slicer_fi_sptr self) -> bool"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(multi_slicer_fi_sptr self, unsigned int which_input) -> uint64_t"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(multi_slicer_fi_sptr self, unsigned int which_output) -> uint64_t"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(multi_slicer_fi_sptr self) -> int"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(multi_slicer_fi_sptr self, int m)"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multi_slicer_fi_sptr self)"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multi_slicer_fi_sptr self) -> bool"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(multi_slicer_fi_sptr self, int m)"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(multi_slicer_fi_sptr self) -> int"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(multi_slicer_fi_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multi_slicer_fi_sptr self, long max_output_buffer)
        set_max_output_buffer(multi_slicer_fi_sptr self, int port, long max_output_buffer)
        """
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(multi_slicer_fi_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multi_slicer_fi_sptr self, long min_output_buffer)
        set_min_output_buffer(multi_slicer_fi_sptr self, int port, long min_output_buffer)
        """
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(multi_slicer_fi_sptr self) -> float"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multi_slicer_fi_sptr self) -> float"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multi_slicer_fi_sptr self) -> float"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(multi_slicer_fi_sptr self) -> float"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multi_slicer_fi_sptr self) -> float"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(multi_slicer_fi_sptr self) -> float"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multi_slicer_fi_sptr self, int which) -> float
        pc_input_buffers_full(multi_slicer_fi_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multi_slicer_fi_sptr self, int which) -> float
        pc_input_buffers_full_avg(multi_slicer_fi_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multi_slicer_fi_sptr self, int which) -> float
        pc_input_buffers_full_var(multi_slicer_fi_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multi_slicer_fi_sptr self, int which) -> float
        pc_output_buffers_full(multi_slicer_fi_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multi_slicer_fi_sptr self, int which) -> float
        pc_output_buffers_full_avg(multi_slicer_fi_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multi_slicer_fi_sptr self, int which) -> float
        pc_output_buffers_full_var(multi_slicer_fi_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(multi_slicer_fi_sptr self) -> float"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(multi_slicer_fi_sptr self) -> float"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(multi_slicer_fi_sptr self) -> float"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(multi_slicer_fi_sptr self) -> float"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(multi_slicer_fi_sptr self) -> float"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(multi_slicer_fi_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(multi_slicer_fi_sptr self)"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(multi_slicer_fi_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(multi_slicer_fi_sptr self) -> int"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(multi_slicer_fi_sptr self) -> int"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(multi_slicer_fi_sptr self, int priority) -> int"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(multi_slicer_fi_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_name(self)


    def symbol_name(self):
        """symbol_name(multi_slicer_fi_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(multi_slicer_fi_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(multi_slicer_fi_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(multi_slicer_fi_sptr self) -> long"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(multi_slicer_fi_sptr self) -> basic_block_sptr"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(multi_slicer_fi_sptr self, int ninputs, int noutputs) -> bool"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(multi_slicer_fi_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(multi_slicer_fi_sptr self, std::string name)"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(multi_slicer_fi_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(multi_slicer_fi_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(multi_slicer_fi_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(multi_slicer_fi_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.multi_slicer_fi_sptr_message_subscribers(self, which_port)

multi_slicer_fi_sptr_swigregister = _EnergyBeamforming_swig.multi_slicer_fi_sptr_swigregister
multi_slicer_fi_sptr_swigregister(multi_slicer_fi_sptr)


multi_slicer_fi_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multi_slicer_fi = multi_slicer_fi.make;

class randphpert3_f(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(rand_pert_size, bf_flag):
        """
        make(double rand_pert_size, int bf_flag) -> randphpert3_f_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::randphpert3_f.

        To avoid accidental use of raw pointers, EnergyBeamforming::randphpert3_f's constructor is in a private implementation class. EnergyBeamforming::randphpert3_f::make is the public interface for creating new instances.

        Params: (rand_pert_size, bf_flag)
        """
        return _EnergyBeamforming_swig.randphpert3_f_make(rand_pert_size, bf_flag)

    make = staticmethod(make)
    __swig_destroy__ = _EnergyBeamforming_swig.delete_randphpert3_f
    __del__ = lambda self: None
randphpert3_f_swigregister = _EnergyBeamforming_swig.randphpert3_f_swigregister
randphpert3_f_swigregister(randphpert3_f)

def randphpert3_f_make(rand_pert_size, bf_flag):
    """
    randphpert3_f_make(double rand_pert_size, int bf_flag) -> randphpert3_f_sptr

    Return a shared_ptr to a new instance of EnergyBeamforming::randphpert3_f.

    To avoid accidental use of raw pointers, EnergyBeamforming::randphpert3_f's constructor is in a private implementation class. EnergyBeamforming::randphpert3_f::make is the public interface for creating new instances.

    Params: (rand_pert_size, bf_flag)
    """
    return _EnergyBeamforming_swig.randphpert3_f_make(rand_pert_size, bf_flag)

class randphpert3_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::EnergyBeamforming::randphpert3_f)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::randphpert3_f)> self) -> randphpert3_f_sptr
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::randphpert3_f)> self, randphpert3_f p) -> randphpert3_f_sptr
        """
        this = _EnergyBeamforming_swig.new_randphpert3_f_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(randphpert3_f_sptr self) -> randphpert3_f"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr___deref__(self)

    __swig_destroy__ = _EnergyBeamforming_swig.delete_randphpert3_f_sptr
    __del__ = lambda self: None

    def make(self, rand_pert_size, bf_flag):
        """
        make(randphpert3_f_sptr self, double rand_pert_size, int bf_flag) -> randphpert3_f_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::randphpert3_f.

        To avoid accidental use of raw pointers, EnergyBeamforming::randphpert3_f's constructor is in a private implementation class. EnergyBeamforming::randphpert3_f::make is the public interface for creating new instances.

        Params: (rand_pert_size, bf_flag)
        """
        return _EnergyBeamforming_swig.randphpert3_f_sptr_make(self, rand_pert_size, bf_flag)


    def history(self):
        """history(randphpert3_f_sptr self) -> unsigned int"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(randphpert3_f_sptr self, int which, int delay)
        declare_sample_delay(randphpert3_f_sptr self, unsigned int delay)
        """
        return _EnergyBeamforming_swig.randphpert3_f_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(randphpert3_f_sptr self, int which) -> unsigned int"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(randphpert3_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(randphpert3_f_sptr self) -> double"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_relative_rate(self)


    def start(self):
        """start(randphpert3_f_sptr self) -> bool"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_start(self)


    def stop(self):
        """stop(randphpert3_f_sptr self) -> bool"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(randphpert3_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(randphpert3_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(randphpert3_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(randphpert3_f_sptr self, int m)"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(randphpert3_f_sptr self)"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(randphpert3_f_sptr self) -> bool"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(randphpert3_f_sptr self, int m)"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(randphpert3_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(randphpert3_f_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(randphpert3_f_sptr self, long max_output_buffer)
        set_max_output_buffer(randphpert3_f_sptr self, int port, long max_output_buffer)
        """
        return _EnergyBeamforming_swig.randphpert3_f_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(randphpert3_f_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(randphpert3_f_sptr self, long min_output_buffer)
        set_min_output_buffer(randphpert3_f_sptr self, int port, long min_output_buffer)
        """
        return _EnergyBeamforming_swig.randphpert3_f_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(randphpert3_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(randphpert3_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(randphpert3_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(randphpert3_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(randphpert3_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(randphpert3_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(randphpert3_f_sptr self, int which) -> float
        pc_input_buffers_full(randphpert3_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert3_f_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(randphpert3_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(randphpert3_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert3_f_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(randphpert3_f_sptr self, int which) -> float
        pc_input_buffers_full_var(randphpert3_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert3_f_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(randphpert3_f_sptr self, int which) -> float
        pc_output_buffers_full(randphpert3_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert3_f_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(randphpert3_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(randphpert3_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert3_f_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(randphpert3_f_sptr self, int which) -> float
        pc_output_buffers_full_var(randphpert3_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert3_f_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(randphpert3_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(randphpert3_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(randphpert3_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(randphpert3_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(randphpert3_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(randphpert3_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(randphpert3_f_sptr self)"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(randphpert3_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(randphpert3_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(randphpert3_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(randphpert3_f_sptr self, int priority) -> int"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(randphpert3_f_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_name(self)


    def symbol_name(self):
        """symbol_name(randphpert3_f_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(randphpert3_f_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(randphpert3_f_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(randphpert3_f_sptr self) -> long"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(randphpert3_f_sptr self) -> basic_block_sptr"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(randphpert3_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(randphpert3_f_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(randphpert3_f_sptr self, std::string name)"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(randphpert3_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(randphpert3_f_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(randphpert3_f_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(randphpert3_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.randphpert3_f_sptr_message_subscribers(self, which_port)

randphpert3_f_sptr_swigregister = _EnergyBeamforming_swig.randphpert3_f_sptr_swigregister
randphpert3_f_sptr_swigregister(randphpert3_f_sptr)


randphpert3_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
randphpert3_f = randphpert3_f.make;

class randphpert4_f(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(rand_pert_size, bf_flag):
        """
        make(double rand_pert_size, int bf_flag) -> randphpert4_f_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::randphpert4_f.

        To avoid accidental use of raw pointers, EnergyBeamforming::randphpert4_f's constructor is in a private implementation class. EnergyBeamforming::randphpert4_f::make is the public interface for creating new instances.

        Params: (rand_pert_size, bf_flag)
        """
        return _EnergyBeamforming_swig.randphpert4_f_make(rand_pert_size, bf_flag)

    make = staticmethod(make)

    def poll_complex_gain(self):
        """
        poll_complex_gain(randphpert4_f self) -> gr_complex



        Params: (NONE)
        """
        return _EnergyBeamforming_swig.randphpert4_f_poll_complex_gain(self)


    def bf_flag(self):
        """
        bf_flag(randphpert4_f self) -> int



        Params: (NONE)
        """
        return _EnergyBeamforming_swig.randphpert4_f_bf_flag(self)

    __swig_destroy__ = _EnergyBeamforming_swig.delete_randphpert4_f
    __del__ = lambda self: None
randphpert4_f_swigregister = _EnergyBeamforming_swig.randphpert4_f_swigregister
randphpert4_f_swigregister(randphpert4_f)

def randphpert4_f_make(rand_pert_size, bf_flag):
    """
    randphpert4_f_make(double rand_pert_size, int bf_flag) -> randphpert4_f_sptr

    Return a shared_ptr to a new instance of EnergyBeamforming::randphpert4_f.

    To avoid accidental use of raw pointers, EnergyBeamforming::randphpert4_f's constructor is in a private implementation class. EnergyBeamforming::randphpert4_f::make is the public interface for creating new instances.

    Params: (rand_pert_size, bf_flag)
    """
    return _EnergyBeamforming_swig.randphpert4_f_make(rand_pert_size, bf_flag)

class randphpert4_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::EnergyBeamforming::randphpert4_f)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::randphpert4_f)> self) -> randphpert4_f_sptr
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::randphpert4_f)> self, randphpert4_f p) -> randphpert4_f_sptr
        """
        this = _EnergyBeamforming_swig.new_randphpert4_f_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(randphpert4_f_sptr self) -> randphpert4_f"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr___deref__(self)

    __swig_destroy__ = _EnergyBeamforming_swig.delete_randphpert4_f_sptr
    __del__ = lambda self: None

    def make(self, rand_pert_size, bf_flag):
        """
        make(randphpert4_f_sptr self, double rand_pert_size, int bf_flag) -> randphpert4_f_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::randphpert4_f.

        To avoid accidental use of raw pointers, EnergyBeamforming::randphpert4_f's constructor is in a private implementation class. EnergyBeamforming::randphpert4_f::make is the public interface for creating new instances.

        Params: (rand_pert_size, bf_flag)
        """
        return _EnergyBeamforming_swig.randphpert4_f_sptr_make(self, rand_pert_size, bf_flag)


    def poll_complex_gain(self):
        """
        poll_complex_gain(randphpert4_f_sptr self) -> gr_complex



        Params: (NONE)
        """
        return _EnergyBeamforming_swig.randphpert4_f_sptr_poll_complex_gain(self)


    def bf_flag(self):
        """
        bf_flag(randphpert4_f_sptr self) -> int



        Params: (NONE)
        """
        return _EnergyBeamforming_swig.randphpert4_f_sptr_bf_flag(self)


    def history(self):
        """history(randphpert4_f_sptr self) -> unsigned int"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(randphpert4_f_sptr self, int which, int delay)
        declare_sample_delay(randphpert4_f_sptr self, unsigned int delay)
        """
        return _EnergyBeamforming_swig.randphpert4_f_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(randphpert4_f_sptr self, int which) -> unsigned int"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(randphpert4_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(randphpert4_f_sptr self) -> double"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_relative_rate(self)


    def start(self):
        """start(randphpert4_f_sptr self) -> bool"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_start(self)


    def stop(self):
        """stop(randphpert4_f_sptr self) -> bool"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(randphpert4_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(randphpert4_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(randphpert4_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(randphpert4_f_sptr self, int m)"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(randphpert4_f_sptr self)"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(randphpert4_f_sptr self) -> bool"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(randphpert4_f_sptr self, int m)"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(randphpert4_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(randphpert4_f_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(randphpert4_f_sptr self, long max_output_buffer)
        set_max_output_buffer(randphpert4_f_sptr self, int port, long max_output_buffer)
        """
        return _EnergyBeamforming_swig.randphpert4_f_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(randphpert4_f_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(randphpert4_f_sptr self, long min_output_buffer)
        set_min_output_buffer(randphpert4_f_sptr self, int port, long min_output_buffer)
        """
        return _EnergyBeamforming_swig.randphpert4_f_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(randphpert4_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(randphpert4_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(randphpert4_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(randphpert4_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(randphpert4_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(randphpert4_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(randphpert4_f_sptr self, int which) -> float
        pc_input_buffers_full(randphpert4_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert4_f_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(randphpert4_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(randphpert4_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert4_f_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(randphpert4_f_sptr self, int which) -> float
        pc_input_buffers_full_var(randphpert4_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert4_f_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(randphpert4_f_sptr self, int which) -> float
        pc_output_buffers_full(randphpert4_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert4_f_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(randphpert4_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(randphpert4_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert4_f_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(randphpert4_f_sptr self, int which) -> float
        pc_output_buffers_full_var(randphpert4_f_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.randphpert4_f_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(randphpert4_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(randphpert4_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(randphpert4_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(randphpert4_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(randphpert4_f_sptr self) -> float"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(randphpert4_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(randphpert4_f_sptr self)"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(randphpert4_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(randphpert4_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(randphpert4_f_sptr self) -> int"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(randphpert4_f_sptr self, int priority) -> int"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(randphpert4_f_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_name(self)


    def symbol_name(self):
        """symbol_name(randphpert4_f_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(randphpert4_f_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(randphpert4_f_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(randphpert4_f_sptr self) -> long"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(randphpert4_f_sptr self) -> basic_block_sptr"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(randphpert4_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(randphpert4_f_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(randphpert4_f_sptr self, std::string name)"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(randphpert4_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(randphpert4_f_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(randphpert4_f_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(randphpert4_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.randphpert4_f_sptr_message_subscribers(self, which_port)

randphpert4_f_sptr_swigregister = _EnergyBeamforming_swig.randphpert4_f_sptr_swigregister
randphpert4_f_sptr_swigregister(randphpert4_f_sptr)


randphpert4_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
randphpert4_f = randphpert4_f.make;

class bfweight2_cc(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> bfweight2_cc_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::bfweight2_cc.

        To avoid accidental use of raw pointers, EnergyBeamforming::bfweight2_cc's constructor is in a private implementation class. EnergyBeamforming::bfweight2_cc::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _EnergyBeamforming_swig.bfweight2_cc_make()

    make = staticmethod(make)
    __swig_destroy__ = _EnergyBeamforming_swig.delete_bfweight2_cc
    __del__ = lambda self: None
bfweight2_cc_swigregister = _EnergyBeamforming_swig.bfweight2_cc_swigregister
bfweight2_cc_swigregister(bfweight2_cc)

def bfweight2_cc_make():
    """
    bfweight2_cc_make() -> bfweight2_cc_sptr

    Return a shared_ptr to a new instance of EnergyBeamforming::bfweight2_cc.

    To avoid accidental use of raw pointers, EnergyBeamforming::bfweight2_cc's constructor is in a private implementation class. EnergyBeamforming::bfweight2_cc::make is the public interface for creating new instances.

    Params: (NONE)
    """
    return _EnergyBeamforming_swig.bfweight2_cc_make()

class bfweight2_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::EnergyBeamforming::bfweight2_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::bfweight2_cc)> self) -> bfweight2_cc_sptr
        __init__(boost::shared_ptr<(gr::EnergyBeamforming::bfweight2_cc)> self, bfweight2_cc p) -> bfweight2_cc_sptr
        """
        this = _EnergyBeamforming_swig.new_bfweight2_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(bfweight2_cc_sptr self) -> bfweight2_cc"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr___deref__(self)

    __swig_destroy__ = _EnergyBeamforming_swig.delete_bfweight2_cc_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(bfweight2_cc_sptr self) -> bfweight2_cc_sptr

        Return a shared_ptr to a new instance of EnergyBeamforming::bfweight2_cc.

        To avoid accidental use of raw pointers, EnergyBeamforming::bfweight2_cc's constructor is in a private implementation class. EnergyBeamforming::bfweight2_cc::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_make(self)


    def history(self):
        """history(bfweight2_cc_sptr self) -> unsigned int"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(bfweight2_cc_sptr self, int which, int delay)
        declare_sample_delay(bfweight2_cc_sptr self, unsigned int delay)
        """
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(bfweight2_cc_sptr self, int which) -> unsigned int"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(bfweight2_cc_sptr self) -> int"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(bfweight2_cc_sptr self) -> double"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_relative_rate(self)


    def start(self):
        """start(bfweight2_cc_sptr self) -> bool"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_start(self)


    def stop(self):
        """stop(bfweight2_cc_sptr self) -> bool"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(bfweight2_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(bfweight2_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(bfweight2_cc_sptr self) -> int"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(bfweight2_cc_sptr self, int m)"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(bfweight2_cc_sptr self)"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(bfweight2_cc_sptr self) -> bool"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(bfweight2_cc_sptr self, int m)"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(bfweight2_cc_sptr self) -> int"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(bfweight2_cc_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(bfweight2_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(bfweight2_cc_sptr self, int port, long max_output_buffer)
        """
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(bfweight2_cc_sptr self, int i) -> long"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(bfweight2_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(bfweight2_cc_sptr self, int port, long min_output_buffer)
        """
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(bfweight2_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(bfweight2_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(bfweight2_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(bfweight2_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(bfweight2_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(bfweight2_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(bfweight2_cc_sptr self, int which) -> float
        pc_input_buffers_full(bfweight2_cc_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(bfweight2_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(bfweight2_cc_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(bfweight2_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(bfweight2_cc_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(bfweight2_cc_sptr self, int which) -> float
        pc_output_buffers_full(bfweight2_cc_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(bfweight2_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(bfweight2_cc_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(bfweight2_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(bfweight2_cc_sptr self) -> pmt_vector_float
        """
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(bfweight2_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(bfweight2_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(bfweight2_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(bfweight2_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(bfweight2_cc_sptr self) -> float"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(bfweight2_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(bfweight2_cc_sptr self)"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(bfweight2_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(bfweight2_cc_sptr self) -> int"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(bfweight2_cc_sptr self) -> int"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(bfweight2_cc_sptr self, int priority) -> int"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(bfweight2_cc_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(bfweight2_cc_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(bfweight2_cc_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(bfweight2_cc_sptr self) -> io_signature_sptr"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(bfweight2_cc_sptr self) -> long"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(bfweight2_cc_sptr self) -> basic_block_sptr"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(bfweight2_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(bfweight2_cc_sptr self) -> std::string"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(bfweight2_cc_sptr self, std::string name)"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(bfweight2_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(bfweight2_cc_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(bfweight2_cc_sptr self) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(bfweight2_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _EnergyBeamforming_swig.bfweight2_cc_sptr_message_subscribers(self, which_port)

bfweight2_cc_sptr_swigregister = _EnergyBeamforming_swig.bfweight2_cc_sptr_swigregister
bfweight2_cc_sptr_swigregister(bfweight2_cc_sptr)


bfweight2_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
bfweight2_cc = bfweight2_cc.make;



